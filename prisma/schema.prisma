generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  Ranking       Ranking[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Ranking {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Category fields
  raidId     String     @map("raid_id")
  armorType  ArmorType  @map("armor_type")
  difficulty Difficulty

  // Ranking fields
  studentId String @map("student_id")
  tier      Tier
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String @map("user_id")

  // Users can only vote for each student once per category
  @@unique([raidId, armorType, difficulty, studentId, userId])
  @@map("rankings")
}

enum Tier {
  SS
  S
  A
  B
  C
  D
}

enum Difficulty {
  Normal
  Hard
  VeryHard
  Hardcore
  Extreme
  Insane
  Torment
  Floor1_49
  Floor50_125
}

enum ArmorType {
  Normal
  LightArmor
  HeavyArmor
  Unarmed
  ElasticArmor
}
